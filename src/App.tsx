import axios from 'axios';
import { useEffect, useRef, useState } from 'react';
import { Alert, Button, Card, Col, Container, Row, Spinner } from 'react-bootstrap';
import unemployedImage from './assets/1593574682.jfif';
import backgroundMusic from './assets/music/backgroundMusic.mp3';
import BackgroundAnimations from './components/BackgroundAnimations';
import DonateModal from './components/DonateModal';
import FileUpload from './components/FileUpload';
import ResultModal from './components/ResultModal';
import { convertFileToBase64 } from './services/resumeAnalyzer';
import './styles/animations.css';
import './styles/App.css';
import { handleApiError } from './utils/errorHandler';

function App() {
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [showModal, setShowModal] = useState(false);
  const [showDonateModal, setShowDonateModal] = useState(false);
  const [isMuted, setIsMuted] = useState(true); // Start muted by default
  
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Initialize audio when component mounts
  useEffect(() => {
    audioRef.current = new Audio(backgroundMusic);
    audioRef.current.loop = true; // Loop the music
    
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.src = '';
      }
    };
  }, []);

  // Handle mute/unmute
  useEffect(() => {
    if (audioRef.current) {
      if (!isMuted) {
        audioRef.current.play().catch(e => console.log('Audio play failed:', e));
      } else {
        audioRef.current.pause();
      }
    }
  }, [isMuted]);

  const toggleSound = () => {
    setIsMuted(!isMuted);
  };

  // Share functionality
  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Unemployed Final Boss',
          text: 'Check out this Resume Roasting app!',
          url: window.location.href
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      const url = window.location.href;
      navigator.clipboard.writeText(url)
        .then(() => alert('Link copied to clipboard! Share it with your friends.'))
        .catch(() => alert('Failed to copy link.'));
    }
  };

  const handleFileSelect = (selectedFile: File) => {
    setFile(selectedFile);
    setResult('');
    setError('');
  };

  const analyzeResume = async () => {
    if (!file) return;
    setLoading(true);
    setError('');

    try {
      const base64Image = await convertFileToBase64(file);
      const apiKey = import.meta.env.VITE_OPENROUTER_API_KEY;
      
      if (!apiKey || apiKey === 'your_api_key_here') {
        alert('API Ai ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ üí©üí©\n(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ö‡∏ó‡∏≥‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡πà‡∏≠ ‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏î‡πâ‡∏ß‡∏¢üëåüèª)');
        return;
      }
      
      const requestData = {
        model: "google/gemini-flash-1.5",
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå resume ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πà‡∏≤ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏° 1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ ‡∏î‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö (üí©) ¬†Resume ‡∏°‡∏∂‡∏á‡∏ô‡∏µ‡πà‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏π‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏π‡∏î‡∏π‡∏à‡∏£‡∏¥‡∏á‡πÜ ¬†‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏Å‡πÉ‡∏à‡∏ó‡∏≥‡πÑ‡∏°‡∏°‡∏∂‡∏á‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏°‡∏∂‡∏á ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ù‡∏∂‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏£‡∏±‡∏Å‡πÅ‡∏°‡πà‡∏°‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏õ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡∏Å‡∏µ‡πà‡∏õ‡∏µ‡∏ß‡∏∞‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ô‡∏µ‡πâ ‡∏ô‡∏µ‡πà‡∏°‡∏∂‡∏á‡πÄ‡∏≠‡∏≤ resume ‡∏ô‡∏µ‡πà‡πÑ‡∏õ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏î‡∏¥? ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏ô‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏∂‡∏á‡πÄ‡∏•‡∏¢‡∏•‡∏∞‡∏Å‡∏±‡∏ô üñïüòÇ / ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ Resume ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏£‡∏≤‡∏Å‡∏Å ‡∏ñ‡∏∏‡πâ‡∏¢ ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏£‡∏π‡∏õ resume ‡∏°‡∏≤ ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ resume ‡∏ã‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô",
              },
              {
                type: "image_url",
                image_url: {
                  url: base64Image
                }
              }
            ]
          }
        ],
        max_tokens: 2000,
        temperature: 0.7
      };

      const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', requestData, {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'HTTP-Referer': window.location.origin,
          'X-Title': 'Resume Roaster',
          'Content-Type': 'application/json'
        },
        timeout: 120000
      });

      if (response.data.choices?.[0]?.message?.content) {
        setResult(response.data.choices[0].message.content);
        setShowModal(true);
      } else {
        setError('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ');
      }
    } catch (err: any) {
      const errorMessage = handleApiError(err);
      if (errorMessage === 'API_ERROR') {
        alert('API Ai ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ üí©üí©\n(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ö‡∏ó‡∏≥‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ï‡πà‡∏≠ ‡πÇ‡∏î‡πÄ‡∏ô‡∏ó‡∏î‡πâ‡∏ß‡∏¢üëåüèª)');
      } else {
        setError(errorMessage);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCloseModal = () => {
    setShowModal(false);
  };

  return (
    <div className="main-background">
      <BackgroundAnimations />
      
      {/* Top left links */}
      <div className="top-left-links">
        <a href="https://github.com/pumpkinn7/Unemployed-final-boss" target="_blank" rel="noopener noreferrer" className="top-link">
          <i className="bi bi-github"></i> GitHub
        </a>
        <button 
          className="top-link"
          onClick={() => setShowDonateModal(true)}
        >
          <i className="bi bi-cup-hot"></i> Donate
        </button>
      </div>
      
      {/* Top right controls */}
      <div className="top-right-controls">
        <button 
          className="control-button" 
          title={isMuted ? "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏•‡∏á" : "‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏•‡∏á"} 
          onClick={toggleSound}
        >
          <i className={`bi ${isMuted ? "bi-volume-mute" : "bi-volume-up"}`}></i>
        </button>
        <button 
          className="control-button" 
          title="‡πÅ‡∏ä‡∏£‡πå" 
          onClick={handleShare}
        >
          <i className="bi bi-share"></i>
        </button>
      </div>

      <Container className="app-container">
        <Row className="justify-content-center">
          <Col md={8}>
            <Card className="app-card">
              <Card.Header className="text-center app-card-header">
                <h5 className="app-card-title">üî•Unemployed Final Bossüî•</h5>
                <p className="app-card-subtitle">
                  ü•∫üëâüèªüëàüèª Song for you <a href="https://www.youtube.com/watch?v=2dbR2JZmlWo&t=16s" target="_blank" rel="noopener noreferrer">Clickk</a>
                </p>
              </Card.Header>
              <Card.Body className="app-card-body">
                <div className="text-center mb-4">
                  <img 
                    src={unemployedImage} 
                    alt="Unemployed"
                    className="unemployed-image"
                  />
                </div>

                <FileUpload file={file} onFileSelect={handleFileSelect} />

                <div className="text-center">
                  {!result ? (
                    <Button 
                      variant="outline-danger" 
                      size="lg"
                      onClick={analyzeResume}
                      disabled={!file || loading}
                      className={`analyze-button ${loading ? 'loading' : ''}`}
                    >
                      {loading ? (
                        <>
                          <Spinner size="sm" className="me-2" />
                          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö
                        </>
                      ) : (
                        'üöÄ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏∞‡∏´‡πå!'
                      )}
                    </Button>
                  ) : (
                    <Button 
                      variant="outline"
                      style={{ borderColor: '#8B4513', color: '#ffffff' }}
                      onClick={() => setShowModal(true)}
                    >
                      üí© ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    </Button>
                  )}
                </div>

                {error && (
                  <Alert variant="danger" className="mt-3 error-alert">
                    {error}
                  </Alert>
                )}
              </Card.Body>
            </Card>
          </Col>
        </Row>

        <ResultModal 
          show={showModal}
          onHide={handleCloseModal}
          result={result}
        />
        <DonateModal 
          show={showDonateModal}
          onHide={() => setShowDonateModal(false)}
        />
      </Container>
    </div>
  );
}

export default App;